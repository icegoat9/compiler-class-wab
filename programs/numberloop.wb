// numberloop.wb
//   max d, 2024-03-22, for partial implementation of 'wabbi' language 
//   (requires integer data type and +,-,*,/ and basic relations)
//
// iteratively sum and concatenate adjacent digits in a number, for example:
//   mergedigits(1467) -> (1+4),(4+6),(6+7) = 51013
//
// mergeloop() does this repeatedly, e.g.:
//   1467 -> 51013 -> 6114 -> 725 -> 97 -> 16 -> 7 (single digit sums to self, is stable)
//
// mergeloop() stops looping and returns a status code of one of three reasons for ending:
//   1: sequence has dwindled to a single digit (stable)
//   2: sequence appears to be growing to infinity (# of digits larger than some threshold)
//   3: sequence appears to be in a loop (e.g. 1813 -> 994 -> 1813 -> 994 ...)

// x % n
func mod(x, n) {
    var d = x / n;
    return x - (d * n);
}

// x ** n
// n must be integer 0 or greater
func pow(x, n) {
    var out = 1;
    var i = 0;
    while i < n {
        out = out * x;
        i = i + 1;
    }
    return out;
}

// get 'length' of num in # digits
func lennum(num) {
    var i = 1;
    var scale = 10;
    while scale < (num + 1) {
        scale = scale * 10;
        i = i + 1;
    }
    return i;
}

// 'concatenate' two numbers a,b (e.g. concat(67,34) = 6734)
func concat(a,b) {
    var scale = pow(10,lennum(b));
    return (scale * a) + b;
}

// get nth digit of number from right
//   e.g. digitn(9876, 3) -> 8
func digitn(num, n) {
    var x = pow(10, n);
    // math notes-to-self:
    //   n % 100 = 45
    //   n % 10 = 5
    //   ((n % 100) - (n % 10)) / 10 = 4
    return (mod(num, x) - mod(num, x / 10)) / (x / 10);
}

// merge all digits into concatenation of pairwise sums
// e.g. 4396 -> concatenate (4+3),(3+9),(9+6) -> 71215
func mergedigits(n) {
    var len = lennum(n);
    var i = 1;
    var out = 0;
    if len == 1 {
        return n;
    }
    while i < len {
        var right = digitn(n,i);
        var left = digitn(n,i+1);
        var sum = left + right;
        if i == 1 {
            out = sum;
        } else {
            out = concat(sum, out);
        }
        i = i + 1;
    }
    return out;
}

// merge digits (sum pairwise and concatenate) repeatedly
//  e.g. 1467 -> 51013 -> 6114 -> 725 -> 97 -> 16 -> 7 (stable)
//  halt and return the following status code under three different conditions:
//    1: sequence has dwindled to a single digit (stable)
//    2: sequence appears to be growing to infinity (# of digits larger than some threshold)
//    3: sequence appears to be in a loop (e.g. 1813 -> 994 -> 1813 -> 994 ...)
func mergeloop(n) {
    if n < 0 {
        return 0 - 1;    // arbitrary 'error code' return. TODO: implement unary - operator
    } 
    var prev = 0;
    var endloop = 0;     // flags to end loop: 1 = single digit, 2 = too many digits, 3 = loop
    var loops = 0;
    while endloop == 0 {
        print n;
        prev = n;
        n = mergedigits(n);
        loops = loops + 1;
        if prev == n {
            endloop = 1;
        }
        else {
            var len = lennum(n);    // TODO: add ability for expression to live in comparison below
            if len >= 8 {
                // number is getting long, probably going -> infinity
                endloop = 2;
            }
            else {
                if loops > 20 {   // probably in an infinite loop / stable cycle
                    endloop = 3;
                }
                else {
                    endloop = 0;
                }
            }
        }
    }
    return endloop; // return reason for ending loop
}

var runtests = 0;
if runtests != 0 {
    print pow(2,5);
    print pow(3,1);
    print mod(13,3);
    print concat(12, 345);
    print lennum(9);
    print lennum(10);
    var xa = 123456;
    print 123456;
    print lennum(xa);
    print digitn(xa,1);
    print digitn(xa,5);
    var x = 4396;
    print x;
    print mergedigits(x);
    print mergedigits(7);
}
else {
    // run a few loop examples for different starting seeds
    print mergeloop(1467);
    print mergeloop(1792);
    print mergeloop(1537);
}


