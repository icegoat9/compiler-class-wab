-- SOURCE (programs/test_programs/fact_for.wb):
[36m// fact_for.wb
// factorial, using (newer) for function to shorten code

func fact(n) {
    var result = 1;
    for x = 1,n {
        result = result * x;
    }
    return result;
}

for x = 1,9 {
    print fact(x);
}[0m
-- TOKENS:
[Token(toktype='FUNC', tokvalue='func', sourceline=4, sourcecol=4),
 Token(toktype='NAME', tokvalue='fact', sourceline=4, sourcecol=9),
 Token(toktype='LPAREN', tokvalue='(', sourceline=4, sourcecol=10),
 Token(toktype='NAME', tokvalue='n', sourceline=4, sourcecol=11),
 Token(toktype='RPAREN', tokvalue=')', sourceline=4, sourcecol=12),
 Token(toktype='LBRACE', tokvalue='{', sourceline=4, sourcecol=14),
 Token(toktype='VAR', tokvalue='var', sourceline=5, sourcecol=7),
 Token(toktype='NAME', tokvalue='result', sourceline=5, sourcecol=14),
 Token(toktype='ASSIGN', tokvalue='=', sourceline=5, sourcecol=16),
 Token(toktype='INTEGER', tokvalue='1', sourceline=5, sourcecol=18),
 Token(toktype='SEMI', tokvalue=';', sourceline=5, sourcecol=19),
 Token(toktype='FOR', tokvalue='for', sourceline=6, sourcecol=7),
 Token(toktype='NAME', tokvalue='x', sourceline=6, sourcecol=9),
 Token(toktype='ASSIGN', tokvalue='=', sourceline=6, sourcecol=11),
 Token(toktype='INTEGER', tokvalue='1', sourceline=6, sourcecol=13),
 Token(toktype='COMMA', tokvalue=',', sourceline=6, sourcecol=14),
 Token(toktype='NAME', tokvalue='n', sourceline=6, sourcecol=15),
 Token(toktype='LBRACE', tokvalue='{', sourceline=6, sourcecol=17),
 Token(toktype='NAME', tokvalue='result', sourceline=7, sourcecol=14),
 Token(toktype='ASSIGN', tokvalue='=', sourceline=7, sourcecol=16),
 Token(toktype='NAME', tokvalue='result', sourceline=7, sourcecol=23),
 Token(toktype='TIMES', tokvalue='*', sourceline=7, sourcecol=25),
 Token(toktype='NAME', tokvalue='x', sourceline=7, sourcecol=27),
 Token(toktype='SEMI', tokvalue=';', sourceline=7, sourcecol=28),
 Token(toktype='RBRACE', tokvalue='}', sourceline=8, sourcecol=5),
 Token(toktype='RETURN', tokvalue='return', sourceline=9, sourcecol=10),
 Token(toktype='NAME', tokvalue='result', sourceline=9, sourcecol=17),
 Token(toktype='SEMI', tokvalue=';', sourceline=9, sourcecol=18),
 Token(toktype='RBRACE', tokvalue='}', sourceline=10, sourcecol=1),
 Token(toktype='FOR', tokvalue='for', sourceline=12, sourcecol=3),
 Token(toktype='NAME', tokvalue='x', sourceline=12, sourcecol=5),
 Token(toktype='ASSIGN', tokvalue='=', sourceline=12, sourcecol=7),
 Token(toktype='INTEGER', tokvalue='1', sourceline=12, sourcecol=9),
 Token(toktype='COMMA', tokvalue=',', sourceline=12, sourcecol=10),
 Token(toktype='INTEGER', tokvalue='9', sourceline=12, sourcecol=11),
 Token(toktype='LBRACE', tokvalue='{', sourceline=12, sourcecol=13),
 Token(toktype='PRINT', tokvalue='print', sourceline=13, sourcecol=9),
 Token(toktype='NAME', tokvalue='fact', sourceline=13, sourcecol=14),
 Token(toktype='LPAREN', tokvalue='(', sourceline=13, sourcecol=15),
 Token(toktype='NAME', tokvalue='x', sourceline=13, sourcecol=16),
 Token(toktype='RPAREN', tokvalue=')', sourceline=13, sourcecol=17),
 Token(toktype='SEMI', tokvalue=';', sourceline=13, sourcecol=18),
 Token(toktype='RBRACE', tokvalue='}', sourceline=14, sourcecol=1)]
-- PARSED PROGRAM:
[36mProgram(statements=[Function(name=Name(str='fact'), params=[Name(str='n')], statements=[DeclareValue(left=Name(str='result'), right=Integer(n=1)), For(name=Name(str='x'), startval=Integer(n=1), endval=Name(str='n'), statements=[Assign(left=Name(str='result'), right=Multiply(left=Name(str='result'), right=Name(str='x')))]), Return(value=Name(str='result'))]), For(name=Name(str='x'), startval=Integer(n=1), endval=Integer(n=9), statements=[Print(value=CallFn(name=Name(str='fact'), params=[Name(str='x')]))])])[0m
-- FORMATTED PROGRAM:
[36mfunc fact(n) {
   var result = 1;
   for x = 1,n {
      result = result * x;
   }
   return result;
}

for x = 1,9 {
   print fact(x);
}
[0m
[94m--input AST representation from parser--[0m
Program(statements=[Function(name=Name(str='fact'), params=[Name(str='n')], statements=[DeclareValue(left=Name(str='result'), right=Integer(n=1)), For(name=Name(str='x'), startval=Integer(n=1), endval=Name(str='n'), statements=[Assign(left=Name(str='result'), right=Multiply(left=Name(str='result'), right=Name(str='x')))]), Return(value=Name(str='result'))]), For(name=Name(str='x'), startval=Integer(n=1), endval=Integer(n=9), statements=[Print(value=CallFn(name=Name(str='fact'), params=[Name(str='x')]))])])
[94m--compiler pass 0: input from parser [0m(run through human-readable formatter)[0m
func fact(n) {
   var result = 1;
   for x = 1,n {
      result = result * x;
   }
   return result;
}

for x = 1,9 {
   print fact(x);
}

[94m--compiler pass 1: elif_rewrite [0m(rewrite if..elif.else clauses as nested if..else)[0m
func fact(n) {
   var result = 1;
   for x = 1,n {
      result = result * x;
   }
   return result;
}

for x = 1,9 {
   print fact(x);
}

[94m--compiler pass 2: for_rewrite [0m(rewrite for loops as whiles)[0m
func fact(n) {
   var result = 1;
   var x = 1;
   while x <= n {
      result = result * x;
      x = x + 1;
   }
   return result;
}

var x = 1;
while x <= 9 {
   print fact(x);
   x = x + 1;
}

[94m--compiler pass 3: fold constants [0m(pre-compute math on constants)[0m
func fact(n) {
   var result = 1;
   var x = 1;
   while x <= n {
      result = result * x;
      x = x + 1;
   }
   return result;
}

var x = 1;
while x <= 9 {
   print fact(x);
   x = x + 1;
}

[94m--compiler pass 4: deinit [0m(separate variable declartion from assignment)[0m
func fact(n) {
   var result;
   result = 1;
   var x;
   x = 1;
   while x <= n {
      result = result * x;
      x = x + 1;
   }
   return result;
}

var x;
x = 1;
while x <= 9 {
   print fact(x);
   x = x + 1;
}

[94m--compiler pass 5: unscript [0m(move top-level statements to main() except globalvar)[0m
func fact(n) {
   var result;
   result = 1;
   var x;
   x = 1;
   while x <= n {
      result = result * x;
      x = x + 1;
   }
   return result;
}

var x;
func main() {
   x = 1;
   while x <= 9 {
      print fact(x);
      x = x + 1;
   }
}


[94m--compiler pass 6: resolve [0m(resolve variable scope and make explicit in data structure)[0m
func fact(n) {
   local result;
   local[result] = 1;
   local x;
   local[x] = 1;
   while local[x] <= local[n] {
      local[result] = local[result] * local[x];
      local[x] = local[x] + 1;
   }
   return local[result];
}

global x;
func main() {
   global[x] = 1;
   while global[x] <= 9 {
      print fact(global[x]);
      global[x] = global[x] + 1;
   }
}


[94m--compiler pass 7: defaultreturns [0m(add return 0 to functions, to simplify assembly codegen)[0m
func fact(n) {
   local result;
   local[result] = 1;
   local x;
   local[x] = 1;
   while local[x] <= local[n] {
      local[result] = local[result] * local[x];
      local[x] = local[x] + 1;
   }
   return local[result];
}

global x;
func main() {
   global[x] = 1;
   while global[x] <= 9 {
      print fact(global[x]);
      global[x] = global[x] + 1;
   }
   return 0;
}


[94m--compiler pass 8: expr_instructions [0m(expressions -> stack machine representation)[0m
func fact(n) {
   local result;
   local[result] = EXPR([PUSH(1)]);
   local x;
   local[x] = EXPR([PUSH(1)]);
   while EXPR([LOAD_LOCAL('x'), LOAD_LOCAL('n'), LTE()]) {
      local[result] = EXPR([LOAD_LOCAL('result'), LOAD_LOCAL('x'), MUL()]);
      local[x] = EXPR([LOAD_LOCAL('x'), PUSH(1), ADD()]);
   }
   return EXPR([LOAD_LOCAL('result')]);
}

global x;
func main() {
   global[x] = EXPR([PUSH(1)]);
   while EXPR([LOAD_GLOBAL('x'), PUSH(9), LTE()]) {
      print EXPR([LOAD_GLOBAL('x'), CALL('fact',1)]);
      global[x] = EXPR([LOAD_GLOBAL('x'), PUSH(1), ADD()]);
   }
   return EXPR([PUSH(0)]);
}


[94m--compiler pass 9: statement_instructions [0m(statements -> stack machine representation)[0m
func fact(n) {
   STATEMENT([
      LOCAL('result')
   ])
   STATEMENT([
      PUSH(1)
      STORE_LOCAL('result')
   ])
   STATEMENT([
      LOCAL('x')
   ])
   STATEMENT([
      PUSH(1)
      STORE_LOCAL('x')
   ])
   while EXPR([LOAD_LOCAL('x'), LOAD_LOCAL('n'), LTE()]) {
      STATEMENT([
         LOAD_LOCAL('result')
         LOAD_LOCAL('x')
         MUL()
         STORE_LOCAL('result')
      ])
      STATEMENT([
         LOAD_LOCAL('x')
         PUSH(1)
         ADD()
         STORE_LOCAL('x')
      ])
   }
   STATEMENT([
      LOAD_LOCAL('result')
      RETURN()
   ])
}

global x;
func main() {
   STATEMENT([
      PUSH(1)
      STORE_GLOBAL('x')
   ])
   while EXPR([LOAD_GLOBAL('x'), PUSH(9), LTE()]) {
      STATEMENT([
         LOAD_GLOBAL('x')
         CALL('fact',1)
         PRINT()
      ])
      STATEMENT([
         LOAD_GLOBAL('x')
         PUSH(1)
         ADD()
         STORE_GLOBAL('x')
      ])
   }
   STATEMENT([
      PUSH(0)
      RETURN()
   ])
}


[94m--compiler pass 10: blocks statements [0m(merge statements into BLOCK data structures with labels)[0m
func fact(n) {
   BLOCK(label='L1', [
      LOCAL('result')
      PUSH(1)
      STORE_LOCAL('result')
      LOCAL('x')
      PUSH(1)
      STORE_LOCAL('x')
   ])
   while EXPR([LOAD_LOCAL('x'), LOAD_LOCAL('n'), LTE()]) {
      BLOCK(label='L2', [
         LOAD_LOCAL('result')
         LOAD_LOCAL('x')
         MUL()
         STORE_LOCAL('result')
         LOAD_LOCAL('x')
         PUSH(1)
         ADD()
         STORE_LOCAL('x')
      ])
   }
   BLOCK(label='L3', [
      LOAD_LOCAL('result')
      RETURN()
   ])
}

global x;
func main() {
   BLOCK(label='L4', [
      PUSH(1)
      STORE_GLOBAL('x')
   ])
   while EXPR([LOAD_GLOBAL('x'), PUSH(9), LTE()]) {
      BLOCK(label='L5', [
         LOAD_GLOBAL('x')
         CALL('fact',1)
         PRINT()
         LOAD_GLOBAL('x')
         PUSH(1)
         ADD()
         STORE_GLOBAL('x')
      ])
   }
   BLOCK(label='L6', [
      PUSH(0)
      RETURN()
   ])
}


[94m--compiler pass 11: block flow [0m(convert If/While/Func flow control to GOTO / BRANCH structure)[0m
func fact(n) {
   BLOCK(label='L1', [
      LOCAL('result')
      PUSH(1)
      STORE_LOCAL('result')
      LOCAL('x')
      PUSH(1)
      STORE_LOCAL('x')
      GOTO(label='L7')
   ])
   BLOCK(label='L7', [
      LOAD_LOCAL('x')
      LOAD_LOCAL('n')
      LTE()
      CBRANCH(iftrue='L2', iffalse='L3')
   ])
   BLOCK(label='L2', [
      LOAD_LOCAL('result')
      LOAD_LOCAL('x')
      MUL()
      STORE_LOCAL('result')
      LOAD_LOCAL('x')
      PUSH(1)
      ADD()
      STORE_LOCAL('x')
      GOTO(label='L7')
   ])
   BLOCK(label='L3', [
      LOAD_LOCAL('result')
      RETURN()
   ])
}

global x;
func main() {
   BLOCK(label='L4', [
      PUSH(1)
      STORE_GLOBAL('x')
      GOTO(label='L8')
   ])
   BLOCK(label='L8', [
      LOAD_GLOBAL('x')
      PUSH(9)
      LTE()
      CBRANCH(iftrue='L5', iffalse='L6')
   ])
   BLOCK(label='L5', [
      LOAD_GLOBAL('x')
      CALL('fact',1)
      PRINT()
      LOAD_GLOBAL('x')
      PUSH(1)
      ADD()
      STORE_GLOBAL('x')
      GOTO(label='L8')
   ])
   BLOCK(label='L6', [
      PUSH(0)
      RETURN()
   ])
}


[94m--compiler pass 12: LLVM initial codegen [0m(convert pseudo state machine to LLVM instructions)[0m
func fact(n) {
   BLOCK(label='L1', [
      LLVM '%result = alloca i32'
      LLVM 'store i32 1, i32* %result'
      LLVM '%x = alloca i32'
      LLVM 'store i32 1, i32* %x'
      LLVM 'br label %L7'
   ])
   BLOCK(label='L7', [
      LLVM '%.r1 = load i32, i32* %x'
      LLVM '%.r2 = load i32, i32* %n'
      LLVM '%.r3 = icmp sle i32 %.r1, %.r2'
      LLVM 'br i1 %.r3, label %L2, label %L3'
   ])
   BLOCK(label='L2', [
      LLVM '%.r4 = load i32, i32* %result'
      LLVM '%.r5 = load i32, i32* %x'
      LLVM '%.r6 = mul i32 %.r4, %.r5'
      LLVM 'store i32 %.r6, i32* %result'
      LLVM '%.r7 = load i32, i32* %x'
      LLVM '%.r8 = add i32 %.r7, 1'
      LLVM 'store i32 %.r8, i32* %x'
      LLVM 'br label %L7'
   ])
   BLOCK(label='L3', [
      LLVM '%.r9 = load i32, i32* %result'
      LLVM 'ret i32 %.r9'
   ])
}

global x;
func main() {
   BLOCK(label='L4', [
      LLVM 'store i32 1, i32* @x'
      LLVM 'br label %L8'
   ])
   BLOCK(label='L8', [
      LLVM '%.r10 = load i32, i32* @x'
      LLVM '%.r11 = icmp sle i32 %.r10, 9'
      LLVM 'br i1 %.r11, label %L5, label %L6'
   ])
   BLOCK(label='L5', [
      LLVM '%.r12 = load i32, i32* @x'
      LLVM '%.r13 = call i32 (i32) @fact(i32 %.r12)'
      LLVM 'call i32 (i32) @_print_int(i32 %.r13)'
      LLVM '%.r14 = load i32, i32* @x'
      LLVM '%.r15 = add i32 %.r14, 1'
      LLVM 'store i32 %.r15, i32* @x'
      LLVM 'br label %L8'
   ])
   BLOCK(label='L6', [
      LLVM 'ret i32 0'
   ])
}


[94m--compiler pass 13: LLVM function entry [0m(add LLVM variable initialization code to functions)[0m
func fact(.arg_n) {
   BLOCK(label='entry', [
      LLVM '%n = alloca i32'
      LLVM 'store i32 %.arg_n, i32* %n'
      LLVM 'br label %L1'
   ])
   BLOCK(label='L1', [
      LLVM '%result = alloca i32'
      LLVM 'store i32 1, i32* %result'
      LLVM '%x = alloca i32'
      LLVM 'store i32 1, i32* %x'
      LLVM 'br label %L7'
   ])
   BLOCK(label='L7', [
      LLVM '%.r1 = load i32, i32* %x'
      LLVM '%.r2 = load i32, i32* %n'
      LLVM '%.r3 = icmp sle i32 %.r1, %.r2'
      LLVM 'br i1 %.r3, label %L2, label %L3'
   ])
   BLOCK(label='L2', [
      LLVM '%.r4 = load i32, i32* %result'
      LLVM '%.r5 = load i32, i32* %x'
      LLVM '%.r6 = mul i32 %.r4, %.r5'
      LLVM 'store i32 %.r6, i32* %result'
      LLVM '%.r7 = load i32, i32* %x'
      LLVM '%.r8 = add i32 %.r7, 1'
      LLVM 'store i32 %.r8, i32* %x'
      LLVM 'br label %L7'
   ])
   BLOCK(label='L3', [
      LLVM '%.r9 = load i32, i32* %result'
      LLVM 'ret i32 %.r9'
   ])
}

global x;
func main() {
   BLOCK(label='entry', [
      LLVM 'br label %L4'
   ])
   BLOCK(label='L4', [
      LLVM 'store i32 1, i32* @x'
      LLVM 'br label %L8'
   ])
   BLOCK(label='L8', [
      LLVM '%.r10 = load i32, i32* @x'
      LLVM '%.r11 = icmp sle i32 %.r10, 9'
      LLVM 'br i1 %.r11, label %L5, label %L6'
   ])
   BLOCK(label='L5', [
      LLVM '%.r12 = load i32, i32* @x'
      LLVM '%.r13 = call i32 (i32) @fact(i32 %.r12)'
      LLVM 'call i32 (i32) @_print_int(i32 %.r13)'
      LLVM '%.r14 = load i32, i32* @x'
      LLVM '%.r15 = add i32 %.r14, 1'
      LLVM 'store i32 %.r15, i32* @x'
      LLVM 'br label %L8'
   ])
   BLOCK(label='L6', [
      LLVM 'ret i32 0'
   ])
}


[94m--LLVM-compatible output--[0m (convert our final internal data structure to string)[0m
declare i32 @_print_int(i32)

define i32 @fact(i32 %.arg_n) {
entry:
    %n = alloca i32
    store i32 %.arg_n, i32* %n
    br label %L1
L1:
    %result = alloca i32
    store i32 1, i32* %result
    %x = alloca i32
    store i32 1, i32* %x
    br label %L7
L7:
    %.r1 = load i32, i32* %x
    %.r2 = load i32, i32* %n
    %.r3 = icmp sle i32 %.r1, %.r2
    br i1 %.r3, label %L2, label %L3
L2:
    %.r4 = load i32, i32* %result
    %.r5 = load i32, i32* %x
    %.r6 = mul i32 %.r4, %.r5
    store i32 %.r6, i32* %result
    %.r7 = load i32, i32* %x
    %.r8 = add i32 %.r7, 1
    store i32 %.r8, i32* %x
    br label %L7
L3:
    %.r9 = load i32, i32* %result
    ret i32 %.r9
}
@x = global i32 0

define i32 @main() {
entry:
    br label %L4
L4:
    store i32 1, i32* @x
    br label %L8
L8:
    %.r10 = load i32, i32* @x
    %.r11 = icmp sle i32 %.r10, 9
    br i1 %.r11, label %L5, label %L6
L5:
    %.r12 = load i32, i32* @x
    %.r13 = call i32 (i32) @fact(i32 %.r12)
    call i32 (i32) @_print_int(i32 %.r13)
    %.r14 = load i32, i32* @x
    %.r15 = add i32 %.r14, 1
    store i32 %.r15, i32* @x
    br label %L8
L6:
    ret i32 0
}
